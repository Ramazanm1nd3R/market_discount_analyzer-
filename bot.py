import os
import logging
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CallbackQueryHandler,
    CommandHandler, ContextTypes, MessageHandler, filters
)
from dotenv import load_dotenv
from service_parsers.magnum_discount_parser import parse_magnum_discounts
from scripts.filter_discounts import filter_discounts_by_threshold

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
MAGNUM_URL = "https://magnum.kz/catalog?discountType=all&city=almaty"

# ======= üìå –§–£–ù–ö–¶–ò–ò –ö–ù–û–ü–û–ö ======== #

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [KeyboardButton("üéâ –°–∫–∏–¥–∫–∏"), KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    await update.message.reply_text(
        "üëã –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üéâ –°–∫–∏–¥–∫–∏ ‚Äî –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π.\n"
        "‚ÑπÔ∏è –û –±–æ—Ç–µ ‚Äî —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ.\n"
        "‚ùì –ü–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞."
    )

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ."""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–∏–¥–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞!\n"
        "–ê–≤—Ç–æ—Ä: Ramazanm1nd3R\n"
        "GitHub: https://github.com/Ramazanm1nd3R"
    )

async def show_discount_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞ —Å–∫–∏–¥–∫–∏."""
    keyboard = [
        [
            InlineKeyboardButton("10%", callback_data="discount_10"),
            InlineKeyboardButton("20%", callback_data="discount_20"),
            InlineKeyboardButton("30%", callback_data="discount_30"),
            InlineKeyboardButton("50%", callback_data="discount_50"),
        ],
        [InlineKeyboardButton("‚úç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="custom_discount")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:",
        reply_markup=reply_markup
    )

async def handle_discount_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–∫–∏–¥–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()

    callback_data = query.data

    if callback_data.startswith("discount_"):
        threshold = int(callback_data.split("_")[1])
        await send_filtered_discounts(update, threshold)
    elif callback_data == "custom_discount":
        await query.message.reply_text("‚úç –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25):")

async def handle_manual_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–∫–∏–¥–∫–∏."""
    try:
        threshold = int(float(update.message.text.strip()))
        await send_filtered_discounts(update, threshold)
    except ValueError:
        await update.message.reply_text("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def send_filtered_discounts(update: Update, threshold: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏."""
    try:
        discount_data = parse_magnum_discounts(MAGNUM_URL)
        filtered_discounts = filter_discounts_by_threshold(discount_data, threshold)

        if not filtered_discounts:
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    f"üì≠ –ù–µ—Ç —Å–∫–∏–¥–æ–∫ –æ—Ç {threshold}% –∏ –≤—ã—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            else:
                await update.message.reply_text(
                    f"üì≠ –ù–µ—Ç —Å–∫–∏–¥–æ–∫ –æ—Ç {threshold}% –∏ –≤—ã—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            return

        file_path = "filtered_discounts.txt"
        with open(file_path, "w", encoding="utf-8") as file:
            for item in filtered_discounts:
                file.write(
                    f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {item['price']}\n"
                    f"üí∏ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {item['old_price']}\n"
                    f"üìâ –°–∫–∏–¥–∫–∞: {item['discount']}%\n\n"
                )

        with open(file_path, "rb") as file:
            if update.callback_query:
                await update.callback_query.message.reply_document(document=file)
            else:
                await update.message.reply_document(document=file)

        os.remove(file_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫–∏–¥–æ–∫: {e}")
        if update.callback_query:
            await update.callback_query.message.reply_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        else:
            await update.message.reply_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# ======= üöÄ –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –ë–û–¢–ê ======== #

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("üéâ –°–∫–∏–¥–∫–∏"), show_discount_buttons))
    application.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –û –±–æ—Ç–µ"), info))
    application.add_handler(MessageHandler(filters.Regex("‚ùì –ü–æ–º–æ—â—å"), help_command))
    application.add_handler(CallbackQueryHandler(handle_discount_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_threshold))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
