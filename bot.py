import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
from service_parsers.magnum_discount_parser import parse_magnum_discounts
from scripts.filter_discounts import filter_discounts_by_threshold

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
MAGNUM_URL = "https://magnum.kz/catalog?discountType=all&city=almaty"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–∫–∏–¥–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–∞–¥–∞—à—å. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    commands = (
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/discounts - –ù–∞–π—Ç–∏ —Å–∫–∏–¥–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º"
    )
    await update.message.reply_text(f"–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n{commands}")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–∏–¥–æ–∫ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ! üá∞üáø\n"
        "–ê–≤—Ç–æ—Ä: Ramazanm1nd3R\n"
        "GitHub: https://github.com/Ramazanm1nd3R\n"
        "–í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: /help"
    )

async def handle_threshold_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        threshold = int(float(update.message.text.strip()))
        discount_data = parse_magnum_discounts(MAGNUM_URL)
        filtered_discounts = filter_discounts_by_threshold(discount_data, threshold)

        if not filtered_discounts:
            await update.message.reply_text(f"–ù–µ—Ç —Å–∫–∏–¥–æ–∫ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã—Ö {threshold}%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        file_path = "filtered_discounts.txt"
        with open(file_path, "w", encoding="utf-8") as file:
            for item in filtered_discounts:
                file.write(
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}\n"
                    f"–¶–µ–Ω–∞: {item['price']}\n"
                    f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {item['old_price']}\n"
                    f"–°–∫–∏–¥–∫–∞: {item['discount']}%\n\n"
                )

        with open(file_path, "rb") as file:
            await update.message.reply_document(document=file)

        os.remove(file_path)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫–∏–¥–æ–∫: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def discounts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):")

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("discounts", discounts))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_threshold_response))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
