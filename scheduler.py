# scheduler.py ‚Äì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ —Å–∫–∏–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import pytz
import logging
from db import (
    connect_db,
    get_subscriptions_for_notifications,
    get_unseen_discounts,
    mark_discounts_as_sent,
    update_parsed_discounts
)
from service_parsers.lamoda_discount_parser import parse_lamoda_discounts
from service_parsers.magnum_discount_parser import parse_magnum_discounts
from telegram import Bot
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ê–ª–º–∞—Ç—ã (UTC+6)
almaty_timezone = pytz.timezone('Asia/Almaty')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
MAGNUM_URL = "https://magnum.kz/catalog?discountType=all&city=almaty"
LAMODA_URLS = {
    "women": "https://www.lamoda.kz/c/4153/default-women/?is_sale=1",
    "men": "https://www.lamoda.kz/c/4152/default-men/?is_sale=1",
    "kids": "https://www.lamoda.kz/c/4154/default-kids/?is_sale=1"
}

# ======= üöÄ –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ ======= #
async def parse_and_update_discounts(pool):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–∫–∏–¥–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã."""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–ª–∞–Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∫–∏–¥–æ–∫...")
        
        # 1Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ Lamoda
        for category_name, url in LAMODA_URLS.items():
            lamoda_discounts = parse_lamoda_discounts(url)
            if lamoda_discounts:
                await update_parsed_discounts(pool, "Lamoda", lamoda_discounts)
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–∫–∏–¥–∫–∏ –¥–ª—è Lamoda ({category_name})")

        # 2Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ Magnum
        magnum_discounts = parse_magnum_discounts(MAGNUM_URL)
        if magnum_discounts:
            await update_parsed_discounts(pool, "Magnum", magnum_discounts)
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–∫–∏–¥–∫–∏ –¥–ª—è Magnum")

        logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å–∫–∏–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

# ======= üì© –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ ======= #
async def send_discount_notifications(pool):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞–º."""
    try:
        now = datetime.now(almaty_timezone).strftime("%H:%M")
        logger.info(f"üîî –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {now}")

        subscriptions = await get_subscriptions_for_notifications(pool, now)
        if not subscriptions:
            logger.info("‚ùé –ü–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç.")
            return

        for sub in subscriptions:
            user_id = sub['user_id']
            service_name = sub['service_name']
            service_id = sub['service_id']

            discounts = await get_unseen_discounts(pool, user_id, service_id)
            if not discounts:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–∫–∏–¥–æ–∫ –ø–æ —Å–µ—Ä–≤–∏—Å—É {service_name}."
                )
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–∫–∏–¥–æ–∫
            message = f"üî• –ù–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ {service_name}:\n\n"
            discount_ids = []
            for d in discounts:
                message += (
                    f"üõçÔ∏è {d['product_name']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {d['price_new']} (–°—Ç–∞—Ä–∞—è: {d['price_old']})\n"
                    f"üìâ –°–∫–∏–¥–∫–∞: {d['discount_percent']}%\n"
                    f"------------------------\n"
                )
                discount_ids.append(d['discount_id'])

            await bot.send_message(chat_id=user_id, text=message)

            # –û—Ç–º–µ—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏
            await mark_discounts_as_sent(pool, user_id, service_id, discount_ids)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–∫–∏–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service_name}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# ======= üïí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ======= #
async def start_scheduler():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ APScheduler."""
    pool = await connect_db()

    scheduler = AsyncIOScheduler()

    # üü° –ü–ª–∞–Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∫–∏–¥–æ–∫ ‚Äì –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –≤ 01:00
    scheduler.add_job(
        parse_and_update_discounts,
        'cron',
        hour=1,
        minute=0,
        timezone=almaty_timezone,
        args=[pool],
        id="daily_parsing"
    )

    # üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ‚Äì –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º—è)
    scheduler.add_job(
        send_discount_notifications,
        'cron',
        minute="*",
        timezone=almaty_timezone,
        args=[pool],
        id="notifications"
    )

    logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
    scheduler.start()

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        while True:
            await asyncio.sleep(1)
    except (KeyboardInterrupt, SystemExit):
        logger.info("‚õî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        scheduler.shutdown()

# ======= üöÄ –ó–∞–ø—É—Å–∫ ======= #
if __name__ == "__main__":
    asyncio.run(start_scheduler())
